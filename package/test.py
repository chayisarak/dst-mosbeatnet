import os
import torch
from model import Mosbeatnet
from torch.utils.data import DataLoader
from Dataloader import AudioSequenceDataset, train_model, evaluate_model, get_consistent_label_map
from evaluate import  get_model_predictions, evaluate_segment_level, evaluate_event_level,save_segment_predictions_csv
from model import Mosbeatnet
import os
import torch
import pandas as pd
import config_new as config
from simulation import process_simulation
from Dataloader import AudioSequenceDataset, train_model, evaluate_model, get_consistent_label_map,load_model
from evaluate import  get_model_predictions, evaluate_segment_level, evaluate_event_level
from model import Mosbeatnet,MosqPlusModel
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader

# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
MODEL_NAME = "Mosbeatnet_final"  # ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏°‡πÄ‡∏î‡∏•
MODEL_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "output", "models", MODEL_NAME))
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

criterion = nn.CrossEntropyLoss()
# optimizer = optim.Adam(model.parameters(), lr=0.0001)

# # Define metadata file paths
train_csv = os.path.join(config.METADATA_DIR, "simulation_metadata_train.csv")
val_csv = os.path.join(config.METADATA_DIR, "simulation_metadata_val.csv")
test_csv = os.path.join(config.METADATA_DIR, "simulation_metadata_test.csv")
simulation_dir = config.SIMULATED_DIR

label_map = get_consistent_label_map(train_csv, val_csv, test_csv)




# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ directory ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
if not os.path.exists(MODEL_DIR):
    raise FileNotFoundError(f"‚ö†Ô∏è Model directory not found: {MODEL_DIR}")

# üîπ ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "Mosbeatnet_final_round" ‡πÅ‡∏•‡∏∞‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ ".pth"
model_files = [f for f in os.listdir(MODEL_DIR) if f.startswith("Mosbeatnet_final_round") and f.endswith(".pth")]

# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not model_files:
    raise FileNotFoundError(f"‚ö†Ô∏è No model files found in {MODEL_DIR}")

# üîπ ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
try:
    latest_model = max(model_files, key=lambda x: int(x.split("_round")[-1].split(".pth")[0]))
except ValueError:
    raise ValueError(f"‚ö†Ô∏è Model filenames are not formatted correctly in {MODEL_DIR}")

# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
MODEL_PATH = os.path.join(MODEL_DIR, latest_model)

# üîπ ‡πÅ‡∏™‡∏î‡∏á path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•
print(f"üìÇ Model directory: {MODEL_DIR}")
print(f"üìÑ Model files found: {model_files}")
print(f"‚úÖ Latest model selected: {latest_model}")
print(f"üîç Model path: {MODEL_PATH}")

# üîπ ‡πÇ‡∏´‡∏•‡∏î checkpoint
checkpoint = torch.load(MODEL_PATH, map_location="cpu")

# üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ model_state ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if "model_state" not in checkpoint:
    raise KeyError(f"‚ö†Ô∏è 'model_state' not found in checkpoint {MODEL_PATH}")



# üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
SEGMENT_LENGTH = 20  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô timestep
NUM_CLASSES = 5       # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™‡∏Ç‡∏≠‡∏á output

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ state_dict
model = Mosbeatnet(n_timesteps=SEGMENT_LENGTH, n_outputs=NUM_CLASSES).to(DEVICE)
model.load_state_dict(checkpoint["model_state"])

# üîπ ‡∏™‡πà‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á device (GPU ‡∏´‡∏£‡∏∑‡∏≠ CPU)
model.to(DEVICE)

print(f"‚úÖ Model loaded successfully from {MODEL_PATH} (Epoch {checkpoint.get('epoch', 'Unknown')})")


print("\nEvaluating Model")
test_dataset = AudioSequenceDataset(metadata_path=test_csv, audio_dir=config.SIMULATED_DIR, segment_duration=0.5)
test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)
test_loss, test_acc = evaluate_model(model, criterion, test_loader, DEVICE)
print(f"Test Completed: Loss = {test_loss:.4f} | Accuracy = {test_acc:.4f}")
# Get predictions
y_pred, y_true, file_names = get_model_predictions(model, test_loader, DEVICE)
# üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å segment prediction
segment_csv_path = os.path.join(config.output_dir, f"{MODEL_NAME}_segment_predictions.csv")

# üîπ Save Segment-Level Predictions
save_segment_predictions_csv(
    y_pred=y_pred,
    y_true=y_true,
    file_names=file_names,
    label_dict=label_map,
    output_path=segment_csv_path,
    model_name=MODEL_NAME,
    segment_duration=0.5,
    overlap=0.0 
)
# Evaluate Segment-Level Performance
output_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "output", "evaluation"))
segment_results = evaluate_segment_level(y_pred, y_true, label_map, output_dir)

# Evaluate Event-Level Performance
event_acc, event_true, event_pred = evaluate_event_level(y_pred, y_true, file_names, label_map)

print(f"\n Final Evaluation Completed. Segment Accuracy: {segment_results['Value'][0]:.4f}, Event Accuracy: {event_acc:.4f}")
